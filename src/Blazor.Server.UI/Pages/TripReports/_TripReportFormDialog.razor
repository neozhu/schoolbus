@using CleanArchitecture.Blazor.Application.Common.Interfaces.MultiTenant;
@using CleanArchitecture.Blazor.Application.Features.Itineraries.DTOs;
@using CleanArchitecture.Blazor.Application.Features.TripReports.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Services.DataServices;

@inherits MudComponentBase
@inject IStringLocalizer<TripReports> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                 <MudItem xs="12" md="6">
                    <MudSelect For="@(() => model.ItineraryId)" T="int?"
                               Label="@L[model.GetMemberDescription(x=>x.ItineraryId)]"
                               Required="true"
                               RequiredError="@L["Itinerary is required."]"
                               Value="@model.ItineraryId" ValueChanged="ItineraryChanged">
                        @foreach (var item in ItineraryService.DataSource.Where(x => x.TenantId == model.TenantId))
                        {
                            <MudSelectItem T="int?" Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.PlatNumber)]" @bind-Value="model.PlatNumber" For="@(() => model.PlatNumber)" Required="false" RequiredError="@L["plat number is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect For="@(() => model.PilotId)"
                               Label="@L[model.GetMemberDescription(x=>x.PilotId)]"
                               Required="true"
                               RequiredError="@L["Pilot is required."]"
                                @bind-Value="@model.PilotId">
                        @foreach (var item in PilotService.DataSource.Where(x => x.TenantId == model.TenantId))
                        {
                            <MudSelectItem Class="d-flex align-items-center" T="int?" Value="@item.Id"><MudAvatar Size="Size.Small" Style="height:14px;width:14px" Class="mr-1"><MudImage Src="@item.ProfilePicture" Height="14" /></MudAvatar>  @item.DisplayName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="@L[model.GetMemberDescription(x=>x.DepartureDate)]" @bind-Date="model.DepartureDate" For="@(() => model.DepartureDate)" Required="false" RequiredError="@L["departure date is required!"]"></MudDatePicker>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.OnBoard)]" @bind-Value="model.OnBoard" For="@(() => model.OnBoard)" Min="0" Required="false" RequiredError="@L["on board is required!"]"></MudNumericField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.NotOnBoard)]" @bind-Value="model.NotOnBoard" For="@(() => model.NotOnBoard)" Min="0" Required="false" RequiredError="@L["not on board is required!"]"></MudNumericField>
                </MudItem>
               
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="@L[model.GetMemberDescription(x=>x.ReportDate)]" @bind-Date="model.ReportDate" For="@(() => model.ReportDate)" Required="false" RequiredError="@L["report date is required!"]"></MudDatePicker>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudEnumSelect Label="@L[model.GetMemberDescription(x=>x.Status)]" @bind-Value="model.Status" For="@(() => model.Status)"></MudEnumSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.Comments)]" @bind-Value="model.Comments" For="@(() => model.Comments)" Required="false" RequiredError="@L["comments is required!"]"></MudTextField>
                </MudItem>
               
                @if (UserProfile.IsSuperAdmin)
                {
                    <MudItem xs="12" md="6">
                        <MudSelect For="@(() => model.TenantId)"
                                   Label="@L["Select Organization"]"
                                   Required="true"
                                   RequiredError="@L["Organization is required."]"
                        @bind-Value="@model.TenantId">
                            @foreach (var item in TenantService.DataSource)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    AddEditTripReportCommandValidator _modelValidator = new();
    [EditorRequired][Parameter] public AddEditTripReportCommand model { get; set; } = null!;
    [Parameter] public UserProfile UserProfile { get; set; } = null!;
    [Inject] private IMediator _mediator { get; set; } = default!;


    void ItineraryChanged(int? id)
    {
        if (id is not null)
        {
            var item = ItineraryService.DataSource.Find(x => x.Id == id);
            model.PlatNumber = item.Bus.PlatNumber;
        }
        else
        {
            model.PlatNumber = "";
        }
        model.ItineraryId = id;
       
 
    }
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditTripReportCommand() { };
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}