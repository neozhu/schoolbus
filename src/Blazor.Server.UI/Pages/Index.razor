@page "/"
@using ApexCharts
@using CleanArchitecture.Blazor.Application.Features.Dashboard.Dto;
@using CleanArchitecture.Blazor.Application.Features.Dashboard.Queries;
@using MudBlazor.Utilities
@using Blazor.Server.UI.Models
@using Theme=Blazor.Server.UI.Theme
@using Size=MudBlazor.Size
@inherits FluxorComponent
<PageTitle>@Title</PageTitle>
<style>
    .lp-app-grid {
        display: grid;
        gap: 24px;
        grid-template-columns: repeat(auto-fit,minmax(300px,1fr));
    }
</style>
<MudContainer MaxWidth="MaxWidth.Medium">
    <MudGrid>
        <MudItem xs="6" sm="3">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <MudIcon Icon="@Icons.Material.Filled.Castle" Color="Color.Info" Size="Size.Large"></MudIcon>
                <div class="ml-3 d-flex flex-column">
                    <h2>@SummaryInfo.TotalSchools</h2>
                    <p class="mud-text-secondary">School</p>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <MudIcon Icon="@Icons.Material.Filled.DirectionsBus" Color="Color.Info" Size="Size.Large"></MudIcon>
                <div class="ml-3 d-flex flex-column">
                    <h2>@SummaryInfo.TotalBuses</h2>
                    <p class="mud-text-secondary">Bus</p>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <MudIcon Icon="@Icons.Material.Filled.FollowTheSigns" Color="Color.Info" Size="Size.Large"></MudIcon>
                <div class="ml-3 d-flex flex-column">
                    <h2>@SummaryInfo.TotalPilots</h2>
                    <p class="mud-text-secondary">Pilot</p>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <MudIcon Icon="@Icons.Material.Filled.LinearScale" Color="Color.Info" Size="Size.Large"></MudIcon>
                <div class="ml-3 d-flex flex-column">
                    <h2>@SummaryInfo.TotalItineraries</h2>
                    <p class="mud-text-secondary">Itinerary</p>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <MudIcon Icon="@Icons.Material.Filled.Groups" Color="Color.Info" Size="Size.Large"></MudIcon>
                <div class="ml-3 d-flex flex-column">
                    <h2>@SummaryInfo.TotalStudents</h2>
                    <p class="mud-text-secondary">Student</p>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <MudIcon Icon="@Icons.Material.Filled.EscalatorWarning" Color="Color.Info" Size="Size.Large"></MudIcon>
                <div class="ml-3 d-flex flex-column">
                    <h2>@SummaryInfo.TotalParents</h2>
                    <p class="mud-text-secondary">Parent</p>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <MudIcon Icon="@Icons.Material.Filled.History" Color="Color.Info" Size="Size.Large"></MudIcon>
                <div class="ml-3 d-flex flex-column">
                    <h2>@SummaryInfo.TotalTransportLogs</h2>
                    <p class="mud-text-secondary">Transport Logs</p>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <MudIcon Icon="@Icons.Material.Filled.AirplaneTicket" Color="Color.Info" Size="Size.Large"></MudIcon>
                <div class="ml-3 d-flex flex-column">
                    <h2>@SummaryInfo.TotalReports</h2>
                    <p class="mud-text-secondary">Trip Reports</p>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <ApexChart @ref="chart1" TItem="TotalOfStudentDto" Height="350" Width="400"
                           Title="Percentage of Students per School">
                    <ApexPointSeries TItem="TotalOfStudentDto"
                                     Items="result.TotalOfStudent"
                                     SeriesType="SeriesType.Donut"
                                     Name="Count"
                                     XValue="@(e => e.SchoolName)"
                                     YAggregate="@(e => e.Sum(e => e.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudPaper Class="d-flex align-center mud-width-full pa-6">
                <ApexChart @ref="chart2" TItem="TotalOfTransportDto" Height="350" Width="400"
                           Title="Percentage of Transports per Itinerary">
                   <ApexPointSeries TItem="TotalOfTransportDto"
                                     Items="result.TotalOfTransport"
                                     SeriesType="SeriesType.Donut"
                                     Name="Count"
                                     XValue="@(e => e.ItinerayName)"
                                     YAggregate="@(e => e.Sum(e => e.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <ApexChart @ref="chart3" TItem="TotalOfMonthDto"
                       Title="Onboard of Students per Month">
                <ApexPointSeries TItem="TotalOfMonthDto"
                                 Items="result.TotalOfMonth"
                                 SeriesType="SeriesType.Bar"
                                 Name="Count"
                                 XValue="@(e => e.YearMonth)"
                                 YAggregate="@(e => e.Sum(e => e.Count))"
                                 OrderByDescending="e=>e.Y" />
            </ApexChart>
        </MudItem>
    </MudGrid>

    <IncrementCountComponent></IncrementCountComponent>
</MudContainer>
@code {
    [Inject]
    private IState<UserProfileState> UserProfileState { get; set; } = null!;
    private UserProfile UserProfile => UserProfileState.Value.UserProfile;
    public string Title { get; set; } = "Dashboard";
    private AggregationResult result = new AggregationResult();
    private SummaryDto SummaryInfo = new SummaryDto();

    ApexChart<TotalOfStudentDto>? chart1;
    ApexChart<TotalOfTransportDto>? chart2;
    ApexChart<TotalOfMonthDto>? chart3;
    protected override async Task OnInitializedAsync()
    {
        UserProfileState.StateChanged += StateOnStateChanged;
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!UserProfileState.Value.IsLoading && !string.IsNullOrEmpty(UserProfileState.Value.UserProfile.UserId))
            {
                result = await Mediator.Send(new SummaryQuery() { UserProfile = UserProfile });
                SummaryInfo = result.Summary;
                StateHasChanged();
                if (chart1 is not null && chart2 is not null && chart3 is not null)
                {
                    await chart1.RenderAsync();
                    await chart2.RenderAsync();
                    await chart3.RenderAsync();
                    await chart1.UpdateOptionsAsync(false, false, false);
                    await chart2.UpdateOptionsAsync(false, false, false);
                }
            }
        }
    }
    protected override void Dispose(bool disposing)
    {
        UserProfileState.StateChanged -= StateOnStateChanged;
        base.Dispose(disposing);
    }
    private void StateOnStateChanged(object? sender, EventArgs args)
    {
        InvokeAsync(async () =>
        {
            if (!UserProfileState.Value.IsLoading)
            {
                result = await Mediator.Send(new SummaryQuery() { UserProfile = UserProfile });
                SummaryInfo = result.Summary;
                StateHasChanged();
                await chart1.RenderAsync();
                chart1.UpdateOptionsAsync(false, false, false);
                await chart2.RenderAsync();
                chart2.UpdateOptionsAsync(false, false, false);
                await chart3.RenderAsync();
                chart3.UpdateOptionsAsync(false, false, false);
            }
        });
    }
}
