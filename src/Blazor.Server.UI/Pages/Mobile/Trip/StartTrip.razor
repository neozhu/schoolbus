@page "/mobile/starttrip"
@using CleanArchitecture.Blazor.Application.Features.Itineraries.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.Itineraries.DTOs
@using CleanArchitecture.Blazor.Application.Features.Itineraries.Queries.GetById
@using CleanArchitecture.Blazor.Application.Features.TripReports.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.TripReports.Commands.Start
@attribute [Authorize(Roles = "Driver")]
@inject NavigationManager NavigationManager
@inject IStringLocalizer<StartTrip> L
<PageTitle>Start Trip</PageTitle>
<MudPaper Elevation="0" Class="d-flex flex-column justify-center flex-grow-1 pa-4 mt-10">
    <MudText Typo="Typo.h3" Align="Align.Center">Customize today's trip</MudText>
    <DriverInfo />
    <MudDivider />
    @if (!_itineraries.Any())
    {
        <MudAlert Severity="MudBlazor.Severity.Error" Variant="Variant.Filled">@L["No route assigned, please contact the administrator."]</MudAlert>
    }
    <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
       <div class="d-flex flex-column justify-center gap-2 align-self-center my-4">
            
            <PickBusAutocomplete Label="@L["Select your bus"]"
                       TenantId="@UserProfile.TenantId"
                       For="@(() => model.BusId)" 
                       Value="model.BusId"
                       T="int?"
                       Placeholder="@L["Select your bus"]" 
                       Variant="Variant.Outlined" 
                       AnchorOrigin="Origin.BottomCenter"
                       ValueChanged="OnBusChanged"
                       Required="true" RequiredError="@L["Please select your bus."]">
                
            </PickBusAutocomplete>
            <MudSelect Label="@L["Select your start location"]"
                       For="@(() => model.StartingStation)" 
                       @bind-Value="model.StartingStation"
                       Placeholder="@L["Select your start location"]" 
                       Variant="Variant.Outlined" 
                       AnchorOrigin="Origin.BottomCenter"
                       Required="true">
                @foreach (var item in _itineraries)
                {
                    <MudSelectItem T="string" Value="@item.StartingStation">@item.StartingStation</MudSelectItem>
                }
                
            </MudSelect>
            <MudSelect Label="@L["Select your final location"]"
                       For="@(() => model.TerminalStation)"
                       @bind-Value="model.TerminalStation"
                       Placeholder="@L["Select your final location"]"
                       Variant="Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter"
                       Required="true">
                @foreach (var item in _itineraries)
                {
                    <MudSelectItem T="string" Value="@item.TerminalStation">@item.TerminalStation</MudSelectItem>
                }

            </MudSelect>
            <MudLoadingButton Class="my-3" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" Loading="@_saving" OnClick="Submit">@L["Start a trip"]</MudLoadingButton>
            
       </div>
    </MudForm>
</MudPaper>
@code {
    [CascadingParameter(Name = "UserProfile")] private UserProfile? UserProfile { get; set; }
    public StartTripReportCommand model = new() { };
    private MudForm? _form;
    private string _tenantId => UserProfile.TenantId;
    private List<ItineraryDto> _itineraries=new();
    private bool _saving;
    protected override async Task OnInitializedAsync()
    {
        model.TenantId = UserProfile.TenantId;
        model.Status = TripStatus.Runing;
        model.DriverId = UserProfile.UserId;
        _itineraries = await Mediator.Send(new GetItineraryByDriverIdQuery() { TenantId = UserProfile.TenantId, DriverId = UserProfile.UserId });
    }
    private void OnBusChanged(int? busid)
    {
        if (busid != null)
        {
            var it = _itineraries.FirstOrDefault(n => n.BusId == busid);
            if(it is not null)
            {
                model.BusId = it.BusId;
                model.PlatNumber = it.Bus.PlatNumber;
                model.StartingStation = it.StartingStation;
                model.TerminalStation = it.TerminalStation;
            }
            else
            {
                model.BusId = null;
                model.PlatNumber = null;
                model.StartingStation = null;
                model.TerminalStation = null;
                Snackbar.Add(L["No routes maintained for the selected bus. Please contact the administrator."], Severity.Warning);
            }

        }
        else
        {
            model.BusId =null;
            model.PlatNumber = null;
            model.StartingStation = null;
            model.TerminalStation = null;
        }

    }
    private async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);

            if (!_form!.IsValid)  return;

            var it = _itineraries.First(x => x.BusId == model.BusId && x.StartingStation == model.StartingStation && x.TerminalStation == model.TerminalStation);
            model.ItineraryId = it.Id;
            model.DepartureDate = DateTime.Now;

            var result = await Mediator.Send(model);

            if (result.Succeeded)
            {
                UserProfile.RouteId = result.Data;
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                NavigationManager.NavigateTo($"/mobile/scan");
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
}
