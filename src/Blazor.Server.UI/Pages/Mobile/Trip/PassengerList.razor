@page "/mobile/passengerlist/{RouteId:int}"
@using CleanArchitecture.Blazor.Application.Features.TripReports.DTOs
@using CleanArchitecture.Blazor.Application.Features.TripReports.Queries.GetById
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IBrowserViewportService BrowserViewportService
@implements IAsyncDisposable
@implements IBrowserViewportObserver
<PageTitle>General information</PageTitle>

<MudPaper Elevation="0" Class="d-flex flex-column justify-space-between flex-grow-1 pa-4 mt-10 gap-4">
    @if (_tripReport is null)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <GeneralInformation Data="@_tripReport"></GeneralInformation>
    }
    <div class="d-flex flex-row justify-space-between align-center gap-2">
        <div class="d-flex flex-column my-2 gap-1">
            <MudText Typo="Typo.h6">Total passengers on board</MudText>
            <MudTextField @bind-Value="search" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        </div>
        <MudPaper Elevation="0" Class="pa-3" Style="height:80px; width:160px;">
            <div class="d-lg-block mud-theme-tertiary rounded px-4" style="height:100%; width:100%;"><MudText Typo="Typo.h3">20</MudText></div>
        </MudPaper>
    </div>
    <MudDivider></MudDivider>
    <div class="d-flex flex-row justify-space-between align-center gap-2">
        <div class="d-flex flex-column my-2 gap-1">
            <MudText Typo="Typo.h6">Passenger list</MudText>
            <MudTextField @bind-Value="search" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        </div>
        <div class="d-flex align-center">
            <MudButton Size="Size.Large" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnReportIncident">Report an incident</MudButton>
        </div>
    </div>
    <MudSimpleTable Style="overflow-x: auto;">
        <tbody>
            @for(int i=1;i<21;i++){
                <tr>
                    <td width="80px" style="padding:10px"><MudAvatar Size="Size.Large"  ></MudAvatar></td>
                    <td width="40px" style="padding:10px">#@i</td>
                    <td style="padding:10px">Sarah Miller</td>
                    <td width="60px" style="padding:10px"><MudChip Color="Color.Success">Normal</MudChip></td>
                    <td width="60px" style="padding:10px"><MudButton>Report</MudButton></td>
                </tr>
            }
          
            
        </tbody>
    </MudSimpleTable>
</MudPaper>

@code {
    [Parameter]
    public int RouteId { get; set; }
    private int _width = 0;
    private int _height = 0;
    private int scanwith = 650;
    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();
    string? foundBarcode = "Here you will see scanned barcode...";
    bool processingScan;
    private string start { get; set; } = "2285 South Federal Blvd";
    private string final { get; set; } = "2160 S Cook Street";
    private string search { get; set; }
    private TripReportDto? _tripReport = null;
    protected override async Task OnInitializedAsync()
    {
        await LoadRoute();
    }
    private async Task LoadRoute()
    {
        _tripReport = await Mediator.Send(new GetTripReportByIdQuery() { Id = RouteId });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
            await InvokeAsync(StateHasChanged);
        }
    }



    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _width = browserViewportEventArgs.BrowserWindowSize.Width;
        _height = browserViewportEventArgs.BrowserWindowSize.Height;

        if (_width >= 960)
        {
            scanwith = 832;
        }
        else
        {
            scanwith = _width - 10;
        }

        return InvokeAsync(StateHasChanged);
    }
    public async ValueTask DisposeAsync()
    {
        await BrowserViewportService.UnsubscribeAsync(this);

    }

    private async Task OnReportIncident()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ReportInfor>("Report", options);
        var result = await dialog.Result;

    }
    private async Task OnConfirm()
    {
        Snackbar.Add("Confirmed", Severity.Success);
        NavigationManager.NavigateTo("/mobile/scan");
    }
}
