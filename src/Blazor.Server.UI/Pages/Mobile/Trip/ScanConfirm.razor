@page "/mobile/scanconfirm"
@using Size= MudBlazor.Size
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IBrowserViewportService BrowserViewportService
@implements IAsyncDisposable
@implements IBrowserViewportObserver
<PageTitle>General information</PageTitle>

<MudPaper Elevation="0" Class="d-flex flex-column justify-space-between flex-grow-1 pa-4 mt-10 gap-4">
    <div class="d-flex flex-row justify-space-between align-center gap-1">
        <div class="d-flex flex-column justify-space-between my-2  gap-1">
            <MudText Typo="Typo.h6">General information</MudText>
            <div class="d-flex flex-row align-center   gap-1">
                <MudIcon Icon="@Icons.Material.Filled.DirectionsBus" Title="bus no." />
                <MudText Typo="Typo.body2">School bus #1 - 69-929L </MudText>
            </div>
            <div class="d-flex flex-row align-center   gap-1">
                <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Title="driver" />
                <MudText Typo="Typo.body2">Driver: John Anderson </MudText>
            </div>
        </div>
        <div class="d-flex flex-column">
            <MudText Typo="Typo.h3">09:41:17 AM</MudText>
            <div class="d-flex flex-row align-center   gap-1 ">
                <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Title="date" />
                <MudText Typo="Typo.body2">Monday. June 6 </MudText>
            </div>
        </div>
    </div>
    <div class="d-flex flex-column">
        <MudText Typo="Typo.h6">Route information</MudText>
        <div class="d-flex flex-row justify-space-between align-center   gap-2">
            <MudTextField @bind-Value="start" Label="start location" Variant="Variant.Outlined"></MudTextField>
            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Route" Title="route" />
            <MudTextField @bind-Value="final" Label="final location" Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="d-flex flex-row justify-space-between align-center gap-2">
        <div class="d-flex flex-column my-2 gap-1">
            <MudText Typo="Typo.h6">Total passengers on board</MudText>
            <MudTextField @bind-Value="search" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        </div>
        <MudPaper Elevation="0" Class="pa-3" Style="height:80px; width:160px;">
            <div class="d-lg-block mud-theme-tertiary rounded px-4" style="height:100%; width:100%;"><MudText Typo="Typo.h3">20</MudText></div>
        </MudPaper>
    </div>
    <div class="cameracontainer pa-0 d-flex flex-column align-center">

        <MudPaper Elevation="0" Class="pa-2 d-flex" Style="height:60px; width:800px;">
            <div class="d-lg-block mud-theme-success rounded px-4" style="height:100%; width:100%;">
                <MudText Typo="Typo.h4"  Align="Align.Center">Successfull</MudText>
            </div>
        </MudPaper>
        <div class="d-flex flex-column align-center gap-4">
            <MudImage ObjectFit="ObjectFit.Cover" Src="/img/girl.jpg" Alt="Student" Elevation="25" Class="rounded-lg" Width="300" Height="300" />
            <MudButton Size="Size.Large" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" OnClick="OnConfirm">Confirm</MudButton>
            <MudButton Size="Size.Large" Variant="Variant.Outlined" FullWidth="true" Color="Color.Error" OnClick="OnReportIncident">Report incident</MudButton>
       </div>
    </div>
</MudPaper>

@code {
    private int _width = 0;
    private int _height = 0;
    private int scanwith = 650;
    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();
    string? foundBarcode = "Here you will see scanned barcode...";
    bool processingScan;
    private string start { get; set; } = "2285 South Federal Blvd";
    private string final { get; set; } = "2160 S Cook Street";
    private string search { get; set; }

    protected override void OnInitialized()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);

            await InvokeAsync(StateHasChanged);
        }
    }



    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _width = browserViewportEventArgs.BrowserWindowSize.Width;
        _height = browserViewportEventArgs.BrowserWindowSize.Height;

        if (_width >= 960)
        {
            scanwith = 832;
        }
        else
        {
            scanwith = _width - 10;
        }

        return InvokeAsync(StateHasChanged);
    }
    public async ValueTask DisposeAsync()
    {
        await BrowserViewportService.UnsubscribeAsync(this);

    }

    private async Task OnReportIncident()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog= await  DialogService.ShowAsync<ReportInfor>("Report", options);
        var result = await dialog.Result;

    }
    private async Task OnConfirm()
    {
        Snackbar.Add("Confirmed", Severity.Success);
        NavigationManager.NavigateTo("/mobile/scan");
    }
}
