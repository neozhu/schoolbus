@page "/mobile/triponmap/{RouteId:int}"
@using CleanArchitecture.Blazor.Application.Features.TripReports.DTOs
@using CleanArchitecture.Blazor.Application.Features.TripReports.Queries.GetById
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using Size= MudBlazor.Size
@inject NavigationManager NavigationManager
@inject IMediator Sender
@implements IAsyncDisposable
<PageTitle>General information</PageTitle>

<MudPaper Elevation="0" Class="d-flex flex-column justify-space-between flex-grow-1 pa-4 mt-10 gap-4">
    @if (_tripReport is null)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <GeneralInformation Data="@_tripReport"></GeneralInformation>
    }
    
    <div class="d-flex flex-row justify-space-between align-center gap-2">
        <div class="d-flex flex-column my-2 gap-1">
            <MudText Typo="Typo.h6">Total passengers on board</MudText>
            <MudTextField @bind-Value="search" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        </div>
        <MudPaper Elevation="0" Class="pa-3" Style="height:80px; width:160px;">
            <div class="d-lg-block mud-theme-tertiary rounded px-4" style="height:100%; width:100%;"><MudText Typo="Typo.h3">20</MudText></div>
        </MudPaper>
    </div>
    <div class="mapcontainer pa-0">
        <GoogleMap @ref="@_map1" Id="map1" Options="@_mapOptions" Height="650px" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
    </div>
</MudPaper>
@code {
    [Parameter]
    public int RouteId { get; set; }
    private string start { get; set; } = "2285 South Federal Blvd";
    private string final { get; set; } = "2160 S Cook Street";
    private string search { get; set; }
    private GoogleMap? _map1;
    private MapOptions _mapOptions;
    private DirectionsRenderer _dirRend;
    private TripReportDto? _tripReport=null;

    protected override async Task OnInitializedAsync()
    {

        _mapOptions = new MapOptions()
            {
                Zoom = 13,
                Center = new LatLngLiteral()
                {
                    Lat = 40.603629,
                    Lng = -75.472518
                },
                MapTypeId = MapTypeId.Roadmap
            };

       await LoadRoute();
    }
    private async Task LoadRoute()
    {
        _tripReport = await Mediator.Send(new GetTripReportByIdQuery() { Id = RouteId });
    }
    private async Task OnAfterInitAsync()
    {
        //Create instance of DirectionRenderer
        _dirRend = await DirectionsRenderer.CreateAsync(_map1.JsRuntime, new DirectionsRendererOptions()
            {
                Map = _map1.InteropObject
            });
    }
    public async ValueTask DisposeAsync()
    {
        if (_dirRend is not null)
        {
            await _dirRend.SetMap(null);
            _dirRend.Dispose();
        }
    }
}
