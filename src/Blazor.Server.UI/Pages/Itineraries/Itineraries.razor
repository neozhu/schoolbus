@page "/pages/Itineraries"

@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.Itineraries.Caching
@using CleanArchitecture.Blazor.Application.Features.Itineraries.DTOs
@using CleanArchitecture.Blazor.Application.Features.Itineraries.Specifications
@using CleanArchitecture.Blazor.Application.Features.Itineraries.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Itineraries.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Itineraries.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Itineraries.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Services.DataServices;

@inherits FluxorComponent
@inject IJSRuntime JS
@inject IStringLocalizer<Itineraries> L
@attribute [Authorize(Policy = Permissions.Itineraries.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="true"
             Virtualize="true"
             @bind-RowsPerPage="_defaultPageSize"
             Height="calc(100vh - 330px)"
             Loading="@_loading"
             MultiSelection="true"
             @bind-SelectedItems="_selectedItems"
             @bind-SelectedItem="_currentDto"
             Hover="true" @ref="_table">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.LinearScale" Size="Size.Large" />
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="ItineraryListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="List View">
                    </MudEnumSelect>
                </div>
            </div>
            <div class="flex-grow-1" />

            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                    Size="Size.Small"
                                    Disabled="@_loading"
                                    OnClick="@(()=>OnRefresh())"
                                    StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                    Style="margin-right: 4px; margin-bottom:4px">@ConstantString.Refresh</MudButton>
                         @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.Add"
                                        Size="Size.Small"
                                        Disabled="@_loading"
                                        OnClick="OnCreate"
                                        Style="margin-right: 4px; margin-bottom:4px"
                                        IconColor="Color.Surface">@ConstantString.New</MudButton>
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.ContentCopy"
                                        Size="Size.Small"
                                        Disabled="@(_selectedItems.Count!=1)"
                                        OnClick="OnClone"
                                        Style="margin-right: 4px; margin-bottom:4px"
                                        IconColor="Color.Surface">@ConstantString.Clone</MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                        StartIcon="@Icons.Material.Filled.Delete"
                                        Disabled="@(!(_selectedItems.Count>0))"
                                        Size="Size.Small"
                                        Style="margin-right: 4px; margin-bottom:4px"
                                        OnClick="OnDeleteChecked"
                                        IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                        }
                        @if (_canExport)
                        {
                            <MudLoadingButton @bind-Loading="_exporting" DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                               Label="@ConstantString.Export"
                                               Disabled="@_loading"
                                               StartIcon="@Icons.Custom.FileFormats.FileExcel"
                                               Size="Size.Small"
                                               Style="margin-right: 4px; margin-bottom:4px"
                                               OnClick="OnExport"
                                               IconColor="Color.Surface">
                                 @ConstantString.Export
                             </MudLoadingButton>
                        }

                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.Add"
                                        Size="Size.Small"
                                        Disabled="@_loading"
                                        OnClick="OnCreate"
                                        Style="margin-right: 4px; margin-bottom:4px"
                                        IconColor="Color.Surface">@ConstantString.New</MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                        StartIcon="@Icons.Material.Filled.Delete"
                                        Disabled="@(!(_selectedItems.Count>0))"
                                        Size="Size.Small"
                                        Style="margin-right: 4px; margin-bottom:4px"
                                        OnClick="OnDeleteChecked"
                                        IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                        }
                    </MudHidden>
                </div>
                @if (_canSearch)
                {
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@Query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
                }

            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>
        <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                @if (_canEdit || _canDelete)
                {
                    <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                        @if (_canEdit)
                        {
                            <MudMenuItem OnClick="@(()=>OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                        }
                        @if (_canDelete)
                        {
                            <MudMenuItem OnClick="@(()=>OnDelete(context.Item))">@ConstantString.Delete</MudMenuItem>
                        }
                    </MudMenu>
                }
                else
                {
                    <MudIconButton Variant="Variant.Filled" DisableElevation="true"
                                   Disabled="true"
                                   Icon="@Icons.Material.Filled.DoNotTouch"
                                   Size="Size.Small"
                                   Color="Color.Surface">
                        @ConstantString.NoAllowed
                    </MudIconButton>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Title="@L[_currentDto.GetMemberDescription(x=>x.Name)]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <div class="d-flex flex-row gap-1">
                        <MudText Typo="Typo.body2">@context.Item.StartingStation</MudText>
                        <MudText Typo="Typo.body2"> - </MudText>
                        <MudText Typo="Typo.body2">@context.Item.TerminalStation</MudText>
                    </div>
                    <div class="d-flex flex-row gap-1">
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">@L["Time: "]</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.FirstTime</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary"> - </MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.LastTime</MudText>
                    </div>


                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Bus" Title="@L[_currentDto.GetMemberDescription(x=>x.Bus)]">
            <CellTemplate>
                <MudText Typo="Typo.body2">@context.Item.Bus.PlatNumber</MudText>
                <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.Bus.Description</MudText>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Driver" Title="@L[_currentDto.GetMemberDescription(x=>x.Driver)]">
            <CellTemplate>
                <AvatarCard ImageUrl="@context.Item.Driver?.ProfilePictureDataUrl" Title="@context.Item.Driver?.DisplayName" Subtitle="@context.Item.Driver?.PhoneNumber"></AvatarCard>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.School" Title="@L[_currentDto.GetMemberDescription(x=>x.School)]">
            <CellTemplate>@context.Item.School.Name</CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Disabled" Title="@L[_currentDto.GetMemberDescription(x=>x.Disabled)]">
            <CellTemplate>@context.Item.Disabled</CellTemplate>
        </PropertyColumn>

        @if (UserProfile.IsSuperAdmin)
        {
            <PropertyColumn Property="x => x.Tenant" Title="@L[_currentDto.GetMemberDescription(x=>x.Tenant)]">
                <CellTemplate>
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.body2">@context.Item.Tenant.Name</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.TenantId</MudText>
                    </div>
                </CellTemplate>
            </PropertyColumn>
        }

    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
    </PagerContent>
</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<ItineraryDto> _selectedItems = new HashSet<ItineraryDto>();
    private MudDataGrid<ItineraryDto> _table = default!;
    private ItineraryDto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    [Inject]
    private IState<UserProfileState> UserProfileState { get; set; } = null!;
    private UserProfile UserProfile => UserProfileState.Value.UserProfile;
   

    [Inject]
    private IMapper Mapper { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private ItinerariesWithPaginationQuery Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Itineraries.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Itineraries.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Itineraries.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Itineraries.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Itineraries.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Itineraries.Export)).Succeeded;
        UserProfileState.StateChanged += StateOnStateChanged;
    }
    protected override void Dispose(bool disposing)
    {
        UserProfileState.StateChanged -= StateOnStateChanged;
        base.Dispose(disposing);
    }
    private void StateOnStateChanged(object? sender, EventArgs args)
    {
        InvokeAsync(async () =>
        {
            if (!UserProfileState.Value.IsLoading)
            {
                await _table.ReloadServerData();
                StateHasChanged();
            }
        });
    }
    private async Task<GridData<ItineraryDto>> ServerReload(GridState<ItineraryDto> state)
    {
        try
        {
            _loading = true;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<ItineraryDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView(ItineraryListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        ItineraryCacheKey.Refresh();
        _selectedItems = new();
        Query.Keyword = string.Empty;
        await ItineraryService.Refresh();
        await _table.ReloadServerData();
    }

    private async Task OnCreate()
    {
        var command = new AddEditItineraryCommand() { TenantId=UserProfile.TenantId};
        var parameters = new DialogParameters
            {
                { nameof(_ItineraryFormDialog.UserProfile),UserProfile },
                { nameof(_ItineraryFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_ItineraryFormDialog>
        (L["Create a new item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
            await ItineraryService.Refresh();
        }
    }
    private async Task OnClone()
    {
        var copyitem = _selectedItems.First();
        var command = new AddEditItineraryCommand()
            {
                 StartingStation=copyitem.StartingStation,
                 TerminalStation=copyitem.TerminalStation,
                  BusId=copyitem.BusId,
                   SchoolId=copyitem.SchoolId,
                    FirstTime=copyitem.FirstTime,
                    LastTime=copyitem.LastTime,
                     PilotId=copyitem.PilotId,
                    TenantId=copyitem.TenantId,
                Description = copyitem.Description,
            };
        var parameters = new DialogParameters
            {
                { nameof(_ItineraryFormDialog.UserProfile),UserProfile },
                { nameof(_ItineraryFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_ItineraryFormDialog>
        (L["Create a new item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
            await ItineraryService.Refresh();
            _selectedItems.Remove(copyitem);
        }
    }
    private async Task OnEdit(ItineraryDto dto)
    {
        var command = Mapper.Map<AddEditItineraryCommand>(dto);
        var parameters = new DialogParameters
            {
                { nameof(_ItineraryFormDialog.UserProfile),UserProfile },
                { nameof(_ItineraryFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_ItineraryFormDialog>
        (L["Edit the item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await ItineraryService.Refresh();
            await _table.ReloadServerData();
        }
    }

    private async Task OnDelete(ItineraryDto dto)
    {
        var command = new DeleteItineraryCommand(new int[] { dto.Id });
        var parameters = new DialogParameters
           {
             { nameof(DeleteConfirmation.Command),  command },
             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DeleteConfirmation, dto.Name) }
           };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems.Remove(dto);
            await ItineraryService.Refresh();
        }
    }

    private async Task OnDeleteChecked()
    {
        var command = new DeleteItineraryCommand(_selectedItems.Select(x => x.Id).ToArray());
        var parameters = new DialogParameters
                        {
                             { nameof(DeleteConfirmation.Command),  command },
                             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DeleteConfirmWithSelected,_selectedItems.Count) }
                        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems = new();
            await ItineraryService.Refresh();
        }
    }

    private async Task OnExport()
    {
        _exporting = true;
        var request = new ExportItinerariesQuery()
            {
                Keyword = Query.Keyword,
                CurrentUser = UserProfile,
                ListView = Query.ListView,
                OrderBy = _table.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
                SortDirection = (_table.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
            };
        var result = await Mediator.Send(request);
        if (result.Succeeded)
        {
            var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["Itineraries"]}.xlsx", result.Data, contentType: "application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
        }
        _exporting = false;
    }
   

}